<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.4 on 2015-06-10 -->

<plugin>
  <name>Mojo&apos;s AspectJ Maven Plugin</name>
  <description>Handles AspectJ usage within Maven.
        Functionality provided is: weaving of aspects (or existing aspects from libraries) with the
        test and/or main classes, weaving of pre-existing jars and ajdoc reporting.</description>
  <groupId>de.zalando</groupId>
  <artifactId>aspectj-maven-plugin</artifactId>
  <version>1.8.1-SNAPSHOT</version>
  <goalPrefix>aspectj</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>aspectj-report</goal>
      <description>Creates an AspectJ HTML report using the {@code ajdoc} tool and format.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>de.zalando.mojo.aspectj.AjcReportMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>ajdtBuildDefFile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Where to find the ajdt build definition file. &lt;i&gt;If set this will override the use of project sourcedirs&lt;/i&gt;.</description>
        </parameter>
        <parameter>
          <name>aspectDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The source directory for the aspects</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>false</editable>
          <description>The basedir of the project.</description>
        </parameter>
        <parameter>
          <name>buildDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>false</editable>
          <description>The build directory (normally &quot;${basedir}/target&quot;).</description>
        </parameter>
        <parameter>
          <name>complianceLevel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify compiler compliance setting (1.3 to 1.8, default is 1.5)</description>
        </parameter>
        <parameter>
          <name>doctitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the title to be placed near the top of the overview summary file. The title will be placed as a
centered, level-one heading directly beneath the upper navigation bar. The title may contain html tags and white
space, though if it does, it must be enclosed in quotes. Any internal quotation marks within title may have to be
escaped.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory for the report.</description>
        </parameter>
        <parameter>
          <name>overview</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies that javadoc should retrieve the text for the overview documentation from the &quot;source&quot; file specified
by path/filename and place it on the Overview page (overview-summary.html). The path/filename is relative to the
${basedir}. While you can use any name you want for filename and place it anywhere you want for path, a typical
thing to do is to name it overview.html and place it in the source tree at the directory that contains the
topmost package directories. In this location, no path is needed when documenting packages, since -sourcepath
will point to this file. For example, if the source tree for the java.lang package is /src/classes/java/lang/,
then you could place the overview file at /src/classes/overview.html. See Real World Example. For information
about the file specified by path/filename, see overview comment file.Note that the overview page is created only
if you pass into javadoc two or more package names. For further explanation, see HTML Frames.) The title on the
overview page is set by -doctitle.</description>
        </parameter>
        <parameter>
          <name>packageScope</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shows only package, protected, and public classes and members.</description>
        </parameter>
        <parameter>
          <name>pluginArtifacts</name>
          <type>java.util.List</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>privateScope</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shows all classes and members.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The maven project.</description>
        </parameter>
        <parameter>
          <name>protectedScope</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shows only protected and public classes and members. This is the default.</description>
        </parameter>
        <parameter>
          <name>publicScope</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Shows only public classes and members.</description>
        </parameter>
        <parameter>
          <name>testAspectDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The source directory for the test aspects</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides more detailed messages while javadoc is running. Without the verbose option, messages appear for loading
the source files, generating the documentation (one message per source file), and sorting. The verbose option
causes the printing of additional messages specifying the number of milliseconds to parse each java source file.</description>
        </parameter>
      </parameters>
      <configuration>
        <aspectDirectory implementation="java.lang.String" default-value="src/main/aspect"/>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <buildDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <complianceLevel implementation="java.lang.String" default-value="${mojo.java.target}"/>
        <outputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}/aspectj-report"/>
        <pluginArtifacts implementation="java.util.List" default-value="${plugin.artifacts}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <testAspectDirectory implementation="java.lang.String" default-value="src/test/aspect"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.doxia.siterenderer.Renderer</role>
          <field-name>siteRenderer</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>compile</goal>
      <description>Weaves all main classes.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>compile</phase>
      <implementation>de.zalando.mojo.aspectj.AjcCompileMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>XaddSerialVersionUID</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Causes the compiler to calculate and add the SerialVersionUID field to any type implementing {@link Serializable} that is
affected by an aspect. The field is calculated based on the class before weaving has taken place.</description>
        </parameter>
        <parameter>
          <name>Xajruntimetarget</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>(Experimental) Allows code to be generated that targets a 1.2 or a 1.5 level AspectJ runtime (default 1.5)</description>
        </parameter>
        <parameter>
          <name>XhasMember</name>
          <type>boolean</type>
          <since>1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the compiler to support hasmethod(method_pattern) and hasfield(field_pattern) type patterns, but only
within declare statements. It&apos;s experimental and undocumented because it may change, and because it doesn&apos;t yet
take into account ITDs.</description>
        </parameter>
        <parameter>
          <name>Xjoinpoints</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>supply a comma separated list of new joinpoints
that can be identified by pointcuts.  Values are:
arrayconstruction, synchronization</description>
        </parameter>
        <parameter>
          <name>Xlint</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set default level for messages about potential programming mistakes in crosscutting code. {level} may be ignore,
warning, or error. This overrides entries in org/aspectj/weaver/XlintDefault.properties from aspectjtools.jar.</description>
        </parameter>
        <parameter>
          <name>Xlintfile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify properties file to set levels for specific crosscutting messages.
PropertyFile is a path to a Java .properties file that takes the same property names and values as
org/aspectj/weaver/XlintDefault.properties from aspectjtools.jar, which it also overrides.</description>
        </parameter>
        <parameter>
          <name>XnoInline</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>(Experimental) do not inline around advice</description>
        </parameter>
        <parameter>
          <name>XnotReweavable</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>(Experimental) Create class files that can&apos;t be subsequently rewoven by AspectJ.</description>
        </parameter>
        <parameter>
          <name>Xreweavable</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>(Experimental) runs weaver in reweavable mode which causes it to create woven classes that can be rewoven,
subject to the restriction that on attempting a reweave all the types that advised the woven type must be
accessible.</description>
        </parameter>
        <parameter>
          <name>XserializableAspects</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>(Experimental) Normally it is an error to declare aspects {@link Serializable}. This option removes that restriction.</description>
        </parameter>
        <parameter>
          <name>Xset</name>
          <type>java.util.Map</type>
          <since>1.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows the caller to provide additional arguments in a Map format. For example:
&lt;pre&gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;Xset&amp;gt;
    &amp;lt;overWeaving&amp;gt;true&amp;lt;/overWeaving&amp;gt;
    &amp;lt;avoidFinal&amp;gt;false&amp;lt;/avoidFinal&amp;gt;
  &amp;lt;/Xset&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>XterminateAfterCompilation</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Causes compiler to terminate before weaving</description>
        </parameter>
        <parameter>
          <name>ajdtBuildDefFile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Where to find the ajdt build definition file. &lt;i&gt;If set this will override the use of project sourcedirs&lt;/i&gt;.</description>
        </parameter>
        <parameter>
          <name>argumentFileName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The filename holding AJC build arguments.
The file will be placed in the project build output directory, and will contain all the arguments passed to
the AJC compiler in the last run, and also all the files included in the AJC build.
&lt;p/&gt;
Sample content shown below to illustrate typical content within the builddef.lst file:
&lt;p/&gt;
&lt;pre&gt;
    &lt;code&gt;
-1.6
-encoding
UTF-8
-classpath
/Users/lj/Development/Projects/Nazgul/nazgul_tools/validation/validation-api/target/nazgul-tools-validation-api-2.0.10-SNAPSHOT.jar:/Users/lj/.m2/repository/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.jar:/Users/lj/.m2/repository/org/aspectj/aspectjrt/1.7.3/aspectjrt-1.7.3.jar:/Users/lj/.m2/repository/junit/junit/4.11/junit-4.11.jar:/Users/lj/.m2/repository/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar:/Users/lj/.m2/repository/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.jar:/Users/lj/Development/Projects/Nazgul/nazgul_tools/validation/validation-aspect/target/classes
-d
/Users/lj/Development/Projects/Nazgul/nazgul_tools/validation/validation-aspect/target/classes
/Users/lj/Development/Projects/Nazgul/nazgul_tools/validation/validation-aspect/src/main/java/se/jguru/nazgul/tools/validation/aspect/ValidationAspect.java
    &lt;/code&gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>aspectDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The source directory for the aspects.</description>
        </parameter>
        <parameter>
          <name>aspectLibraries</name>
          <type>de.zalando.mojo.aspectj.Module[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Weave binary aspects from the jars.
The aspects should have been output by the same version of the compiler.
The modules must also be dependencies of the project.
Corresponds to &lt;code&gt;ajc -aspectpath&lt;/code&gt; option</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>false</editable>
          <description>The basedir of the project.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override location of VM&apos;s bootclasspath for purposes of evaluating types when compiling. Path is a single
argument containing a list of paths to zip files or directories, delimited by the platform-specific path
delimiter.</description>
        </parameter>
        <parameter>
          <name>complianceLevel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify compiler compliance setting.
Defaults to 1.4, with permitted values (&quot;1.3&quot;, &quot;1.4&quot;, &quot;1.5&quot;, &quot;1.6&quot; and &quot;1.7&quot;, &quot;1.8&quot;).</description>
        </parameter>
        <parameter>
          <name>crossrefs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>generate .ajsym file into the output directory</description>
        </parameter>
        <parameter>
          <name>deprecation</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Toggle warning messages on deprecations</description>
        </parameter>
        <parameter>
          <name>emacssym</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generate .ajesym symbol files for emacs support.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify default source encoding format.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of ant-style patterns used to specify the aspects that should be excluded when compiling. When none
specified all .java and .aj files in the project source directories, or directories specified by the ajdtDefFile
property are included.</description>
        </parameter>
        <parameter>
          <name>forceAjcCompile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Forces re-compilation, regardless of whether the compiler arguments or the sources have changed.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of ant-style patterns used to specify the aspects that should be included when compiling. When none
specified all .java and .aj files in the project source directories, or directories specified by the ajdtDefFile
property are included.</description>
        </parameter>
        <parameter>
          <name>noImportError</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Emit no errors for unresolved imports;</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>false</editable>
          <description>The directory for compiled classes.</description>
        </parameter>
        <parameter>
          <name>outxml</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generate aop.xml file for load-time weaving with default name (/META-INF/aop.xml).</description>
        </parameter>
        <parameter>
          <name>outxmlfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generate aop.xml file for load-time weaving with custom name.</description>
        </parameter>
        <parameter>
          <name>preserveAllLocals</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Preserve all local variables during code generation (to facilitate debugging).</description>
        </parameter>
        <parameter>
          <name>proc</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set the compiler &quot;proc&quot; argument.
Aspectj supports Annotation processing since 1.8.2, it can been disabled by &lt;code&gt;proc:none&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>proceedOnError</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Keep compiling after error, dumping class files with problem methods</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The maven project.</description>
        </parameter>
        <parameter>
          <name>referenceInfo</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Compute reference information.</description>
        </parameter>
        <parameter>
          <name>repeat</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Repeat compilation process N times (typically to do performance analysis).</description>
        </parameter>
        <parameter>
          <name>showWeaveInfo</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Emit messages about weaving</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution.</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Toggle assertions (1.3, 1.4, 1.5, 1.6, 1.7 or 1.8 - default is 1.4). When using -source 1.3, an assert()
statement valid under Java 1.4 will result in a compiler error. When using -source 1.4, treat assert
as a keyword and implement assertions according to the 1.4 language spec. When using -source 1.5 or higher, Java
5 language features are permitted. With --source 1.7 or higher Java 7 features are supported.</description>
        </parameter>
        <parameter>
          <name>sources</name>
          <type>org.codehaus.plexus.util.Scanner[]</type>
          <since>1.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Set the java source folders to use, specifying the includes and excludes. 
&lt;/p&gt;
&lt;p&gt;
If you don&apos;t specify this parameter, all java sources of the current project fill be used.
If you specify this parameter as an empty tag (i.e. &amp;lt;sources/&amp;gt;), all source folders will be ignored.
Otherwise specify the source folder(s) to use.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>target</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify classfile target setting (1.1 to 1.8) default is 1.2</description>
        </parameter>
        <parameter>
          <name>testAspectDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The source directory for the test aspects.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Emit messages about accessed/processed compilation units</description>
        </parameter>
        <parameter>
          <name>warn</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Emit warnings for any instances of the comma-delimited list of questionable code.
Supported values are shown in the list below, with their respective explanations - as copied
directly from the AJC reference.
&lt;p/&gt;
&lt;dl&gt;
&lt;dt&gt;constructorName&lt;/dt&gt;
&lt;dd&gt;method with constructor name&lt;/dd&gt;
&lt;dt&gt;packageDefaultMethod&lt;/dt&gt;
&lt;dd&gt;attempt to override package-default method&lt;/dd&gt;
&lt;dt&gt;deprecation&lt;/dt&gt;
&lt;dd&gt;usage of deprecated type or member&lt;/dd&gt;
&lt;dt&gt;maskedCatchBlocks&lt;/dt&gt;
&lt;dd&gt;hidden catch block&lt;/dd&gt;
&lt;dt&gt;unusedLocals&lt;/dt&gt;
&lt;dd&gt;local variable never read&lt;/dd&gt;
&lt;dt&gt;unusedArguments&lt;/dt&gt;
&lt;dd&gt;method argument never read&lt;/dd&gt;
&lt;dt&gt;unusedImports&lt;/dt&gt;
&lt;dd&gt;import statement not used by code in file&lt;/dd&gt;
&lt;dt&gt;none&lt;/dt&gt;
&lt;dd&gt;suppress all compiler warnings&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>weaveDependencies</name>
          <type>de.zalando.mojo.aspectj.Module[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of of modules to weave (into target directory). Corresponds to &lt;code&gt;ajc
-inpath&lt;/code&gt; option (or &lt;code&gt;-injars&lt;/code&gt; for pre-1.2 (which is not supported)).</description>
        </parameter>
        <parameter>
          <name>weaveDirectories</name>
          <type>java.lang.String[]</type>
          <since>1.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of of directories with .class files to weave (into target directory).
Corresponds to &lt;code&gt;ajc -inpath&lt;/code&gt; option.</description>
        </parameter>
        <parameter>
          <name>xmlConfigured</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Parameter which indicates an XML file containing AspectJ weaving instructions.
Assigning this plugin parameter adds the &lt;code&gt;-xmlConfigured&lt;/code&gt; option to ajc.</description>
        </parameter>
      </parameters>
      <configuration>
        <argumentFileName implementation="java.lang.String" default-value="builddef.lst"/>
        <aspectDirectory implementation="java.lang.String" default-value="src/main/aspect"/>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <complianceLevel implementation="java.lang.String" default-value="1.4"/>
        <encoding implementation="java.lang.String">${project.build.sourceEncoding}</encoding>
        <forceAjcCompile implementation="boolean" default-value="false"/>
        <outputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <skip implementation="boolean" default-value="false">${aspectj.skip}</skip>
        <source implementation="java.lang.String" default-value="${mojo.java.target}"/>
        <target implementation="java.lang.String" default-value="${project.build.java.target}"/>
        <testAspectDirectory implementation="java.lang.String" default-value="src/test/aspect"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on aspectj-maven-plugin.&lt;br&gt;
Call &lt;code&gt;mvn aspectj:help -Ddetail=true -Dgoal=&amp;lt;goal-name&amp;gt;&lt;/code&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>de.zalando.mojo.aspectj.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If &lt;code&gt;true&lt;/code&gt;, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>test-compile</goal>
      <description>Weaves all test classes.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>test-compile</phase>
      <implementation>de.zalando.mojo.aspectj.AjcTestCompileMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>XaddSerialVersionUID</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Causes the compiler to calculate and add the SerialVersionUID field to any type implementing {@link Serializable} that is
affected by an aspect. The field is calculated based on the class before weaving has taken place.</description>
        </parameter>
        <parameter>
          <name>Xajruntimetarget</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>(Experimental) Allows code to be generated that targets a 1.2 or a 1.5 level AspectJ runtime (default 1.5)</description>
        </parameter>
        <parameter>
          <name>XhasMember</name>
          <type>boolean</type>
          <since>1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Enables the compiler to support hasmethod(method_pattern) and hasfield(field_pattern) type patterns, but only
within declare statements. It&apos;s experimental and undocumented because it may change, and because it doesn&apos;t yet
take into account ITDs.</description>
        </parameter>
        <parameter>
          <name>Xjoinpoints</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>supply a comma separated list of new joinpoints
that can be identified by pointcuts.  Values are:
arrayconstruction, synchronization</description>
        </parameter>
        <parameter>
          <name>Xlint</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set default level for messages about potential programming mistakes in crosscutting code. {level} may be ignore,
warning, or error. This overrides entries in org/aspectj/weaver/XlintDefault.properties from aspectjtools.jar.</description>
        </parameter>
        <parameter>
          <name>Xlintfile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify properties file to set levels for specific crosscutting messages.
PropertyFile is a path to a Java .properties file that takes the same property names and values as
org/aspectj/weaver/XlintDefault.properties from aspectjtools.jar, which it also overrides.</description>
        </parameter>
        <parameter>
          <name>XnoInline</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>(Experimental) do not inline around advice</description>
        </parameter>
        <parameter>
          <name>XnotReweavable</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>(Experimental) Create class files that can&apos;t be subsequently rewoven by AspectJ.</description>
        </parameter>
        <parameter>
          <name>Xreweavable</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>(Experimental) runs weaver in reweavable mode which causes it to create woven classes that can be rewoven,
subject to the restriction that on attempting a reweave all the types that advised the woven type must be
accessible.</description>
        </parameter>
        <parameter>
          <name>XserializableAspects</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>(Experimental) Normally it is an error to declare aspects {@link Serializable}. This option removes that restriction.</description>
        </parameter>
        <parameter>
          <name>Xset</name>
          <type>java.util.Map</type>
          <since>1.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows the caller to provide additional arguments in a Map format. For example:
&lt;pre&gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;Xset&amp;gt;
    &amp;lt;overWeaving&amp;gt;true&amp;lt;/overWeaving&amp;gt;
    &amp;lt;avoidFinal&amp;gt;false&amp;lt;/avoidFinal&amp;gt;
  &amp;lt;/Xset&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>XterminateAfterCompilation</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Causes compiler to terminate before weaving</description>
        </parameter>
        <parameter>
          <name>ajdtBuildDefFile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Where to find the ajdt build definition file. &lt;i&gt;If set this will override the use of project sourcedirs&lt;/i&gt;.</description>
        </parameter>
        <parameter>
          <name>argumentFileName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The filename holding AJC build arguments.
The file will be placed in the project build output directory, and will contain all the arguments passed to
the AJC compiler in the last run, and also all the files included in the AJC build.
&lt;p/&gt;
Sample content shown below to illustrate typical content within the builddef.lst file:
&lt;p/&gt;
&lt;pre&gt;
    &lt;code&gt;
-1.6
-encoding
UTF-8
-classpath
/Users/lj/Development/Projects/Nazgul/nazgul_tools/validation/validation-api/target/nazgul-tools-validation-api-2.0.10-SNAPSHOT.jar:/Users/lj/.m2/repository/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.jar:/Users/lj/.m2/repository/org/aspectj/aspectjrt/1.7.3/aspectjrt-1.7.3.jar:/Users/lj/.m2/repository/junit/junit/4.11/junit-4.11.jar:/Users/lj/.m2/repository/ch/qos/logback/logback-classic/1.0.13/logback-classic-1.0.13.jar:/Users/lj/.m2/repository/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.jar:/Users/lj/Development/Projects/Nazgul/nazgul_tools/validation/validation-aspect/target/classes
-d
/Users/lj/Development/Projects/Nazgul/nazgul_tools/validation/validation-aspect/target/classes
/Users/lj/Development/Projects/Nazgul/nazgul_tools/validation/validation-aspect/src/main/java/se/jguru/nazgul/tools/validation/aspect/ValidationAspect.java
    &lt;/code&gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>aspectDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The source directory for the aspects.</description>
        </parameter>
        <parameter>
          <name>aspectLibraries</name>
          <type>de.zalando.mojo.aspectj.Module[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Weave binary aspects from the jars.
The aspects should have been output by the same version of the compiler.
The modules must also be dependencies of the project.
Corresponds to &lt;code&gt;ajc -aspectpath&lt;/code&gt; option</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>false</editable>
          <description>The basedir of the project.</description>
        </parameter>
        <parameter>
          <name>bootclasspath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override location of VM&apos;s bootclasspath for purposes of evaluating types when compiling. Path is a single
argument containing a list of paths to zip files or directories, delimited by the platform-specific path
delimiter.</description>
        </parameter>
        <parameter>
          <name>complianceLevel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify compiler compliance setting.
Defaults to 1.4, with permitted values (&quot;1.3&quot;, &quot;1.4&quot;, &quot;1.5&quot;, &quot;1.6&quot; and &quot;1.7&quot;, &quot;1.8&quot;).</description>
        </parameter>
        <parameter>
          <name>crossrefs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>generate .ajsym file into the output directory</description>
        </parameter>
        <parameter>
          <name>deprecation</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Toggle warning messages on deprecations</description>
        </parameter>
        <parameter>
          <name>emacssym</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generate .ajesym symbol files for emacs support.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify default source encoding format.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of ant-style patterns used to specify the aspects that should be excluded when compiling. When none
specified all .java and .aj files in the project source directories, or directories specified by the ajdtDefFile
property are included.</description>
        </parameter>
        <parameter>
          <name>forceAjcCompile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Forces re-compilation, regardless of whether the compiler arguments or the sources have changed.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of ant-style patterns used to specify the aspects that should be included when compiling. When none
specified all .java and .aj files in the project source directories, or directories specified by the ajdtDefFile
property are included.</description>
        </parameter>
        <parameter>
          <name>noImportError</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Emit no errors for unresolved imports;</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>false</editable>
          <description>The directory where compiled test classes go.</description>
        </parameter>
        <parameter>
          <name>outxml</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generate aop.xml file for load-time weaving with default name (/META-INF/aop.xml).</description>
        </parameter>
        <parameter>
          <name>outxmlfile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generate aop.xml file for load-time weaving with custom name.</description>
        </parameter>
        <parameter>
          <name>preserveAllLocals</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Preserve all local variables during code generation (to facilitate debugging).</description>
        </parameter>
        <parameter>
          <name>proc</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set the compiler &quot;proc&quot; argument.
Aspectj supports Annotation processing since 1.8.2, it can been disabled by &lt;code&gt;proc:none&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>proceedOnError</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Keep compiling after error, dumping class files with problem methods</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The maven project.</description>
        </parameter>
        <parameter>
          <name>referenceInfo</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Compute reference information.</description>
        </parameter>
        <parameter>
          <name>repeat</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Repeat compilation process N times (typically to do performance analysis).</description>
        </parameter>
        <parameter>
          <name>showWeaveInfo</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Emit messages about weaving</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip plugin execution.</description>
        </parameter>
        <parameter>
          <name>source</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Toggle assertions (1.3, 1.4, 1.5, 1.6, 1.7 or 1.8 - default is 1.4). When using -source 1.3, an assert()
statement valid under Java 1.4 will result in a compiler error. When using -source 1.4, treat assert
as a keyword and implement assertions according to the 1.4 language spec. When using -source 1.5 or higher, Java
5 language features are permitted. With --source 1.7 or higher Java 7 features are supported.</description>
        </parameter>
        <parameter>
          <name>target</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify classfile target setting (1.1 to 1.8) default is 1.2</description>
        </parameter>
        <parameter>
          <name>testAspectDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The source directory for the test aspects.</description>
        </parameter>
        <parameter>
          <name>testSources</name>
          <type>org.codehaus.plexus.util.Scanner[]</type>
          <since>1.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Set the java test source folders to use, specifying the includes and excludes.
&lt;/p&gt; 
&lt;p&gt;
If you don&apos;t specify this parameter, all java test sources of the current project fill be used.
If you specify this parameter as an empty tag (i.e. &amp;lt;testSources/&amp;gt;), all test source folders will be ignored.
Otherwise specify the test source folder(s) to use.
&lt;p&gt;</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Emit messages about accessed/processed compilation units</description>
        </parameter>
        <parameter>
          <name>warn</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Emit warnings for any instances of the comma-delimited list of questionable code.
Supported values are shown in the list below, with their respective explanations - as copied
directly from the AJC reference.
&lt;p/&gt;
&lt;dl&gt;
&lt;dt&gt;constructorName&lt;/dt&gt;
&lt;dd&gt;method with constructor name&lt;/dd&gt;
&lt;dt&gt;packageDefaultMethod&lt;/dt&gt;
&lt;dd&gt;attempt to override package-default method&lt;/dd&gt;
&lt;dt&gt;deprecation&lt;/dt&gt;
&lt;dd&gt;usage of deprecated type or member&lt;/dd&gt;
&lt;dt&gt;maskedCatchBlocks&lt;/dt&gt;
&lt;dd&gt;hidden catch block&lt;/dd&gt;
&lt;dt&gt;unusedLocals&lt;/dt&gt;
&lt;dd&gt;local variable never read&lt;/dd&gt;
&lt;dt&gt;unusedArguments&lt;/dt&gt;
&lt;dd&gt;method argument never read&lt;/dd&gt;
&lt;dt&gt;unusedImports&lt;/dt&gt;
&lt;dd&gt;import statement not used by code in file&lt;/dd&gt;
&lt;dt&gt;none&lt;/dt&gt;
&lt;dd&gt;suppress all compiler warnings&lt;/dd&gt;
&lt;/dl&gt;</description>
        </parameter>
        <parameter>
          <name>weaveDependencies</name>
          <type>de.zalando.mojo.aspectj.Module[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of of modules to weave (into target directory). Corresponds to &lt;code&gt;ajc
-inpath&lt;/code&gt; option (or &lt;code&gt;-injars&lt;/code&gt; for pre-1.2 (which is not supported)).</description>
        </parameter>
        <parameter>
          <name>weaveDirectories</name>
          <type>java.lang.String[]</type>
          <since>1.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of of directories with .class files to weave (into target directory).
Corresponds to &lt;code&gt;ajc -inpath&lt;/code&gt; option.</description>
        </parameter>
        <parameter>
          <name>weaveMainSourceFolder</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to indicate if the main source dirs should be a part of the compile process.
&lt;strong&gt;Note!&lt;/strong&gt; This will make all classes in main source dir appear in the
test output dir also, potentially overwriting test resources.</description>
        </parameter>
        <parameter>
          <name>weaveWithAspectsInMainSourceFolder</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to indicate if aspects in the the main source dirs
should be a part of the compile process</description>
        </parameter>
        <parameter>
          <name>xmlConfigured</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Parameter which indicates an XML file containing AspectJ weaving instructions.
Assigning this plugin parameter adds the &lt;code&gt;-xmlConfigured&lt;/code&gt; option to ajc.</description>
        </parameter>
      </parameters>
      <configuration>
        <argumentFileName implementation="java.lang.String" default-value="builddef.lst"/>
        <aspectDirectory implementation="java.lang.String" default-value="src/main/aspect"/>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <complianceLevel implementation="java.lang.String" default-value="1.4"/>
        <encoding implementation="java.lang.String">${project.build.sourceEncoding}</encoding>
        <forceAjcCompile implementation="boolean" default-value="false"/>
        <outputDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <skip implementation="boolean" default-value="false">${aspectj.skip}</skip>
        <source implementation="java.lang.String" default-value="${mojo.java.target}"/>
        <target implementation="java.lang.String" default-value="${project.build.java.target}"/>
        <testAspectDirectory implementation="java.lang.String" default-value="src/test/aspect"/>
        <weaveMainSourceFolder implementation="boolean" default-value="false"/>
        <weaveWithAspectsInMainSourceFolder implementation="boolean" default-value="true"/>
      </configuration>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>3.0.10</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-project</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-profile</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact-manager</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-repository-metadata</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-provider-api</artifactId>
      <type>jar</type>
      <version>1.0-beta-6</version>
    </dependency>
    <dependency>
      <groupId>backport-util-concurrent</groupId>
      <artifactId>backport-util-concurrent</artifactId>
      <type>jar</type>
      <version>3.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-registry</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-interpolation</artifactId>
      <type>jar</type>
      <version>1.11</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-container-default</artifactId>
      <type>jar</type>
      <version>1.0-alpha-9-stable-1</version>
    </dependency>
    <dependency>
      <groupId>classworlds</groupId>
      <artifactId>classworlds</artifactId>
      <type>jar</type>
      <version>1.1-alpha-2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.reporting</groupId>
      <artifactId>maven-reporting-api</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-sink-api</artifactId>
      <type>jar</type>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-logging-api</artifactId>
      <type>jar</type>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-site-renderer</artifactId>
      <type>jar</type>
      <version>1.1.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-core</artifactId>
      <type>jar</type>
      <version>1.1.2</version>
    </dependency>
    <dependency>
      <groupId>xerces</groupId>
      <artifactId>xercesImpl</artifactId>
      <type>jar</type>
      <version>2.8.1</version>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <type>jar</type>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>commons-httpclient</groupId>
      <artifactId>commons-httpclient</artifactId>
      <type>jar</type>
      <version>3.1</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <type>jar</type>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-decoration-model</artifactId>
      <type>jar</type>
      <version>1.1.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-module-xhtml</artifactId>
      <type>jar</type>
      <version>1.1.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-module-fml</artifactId>
      <type>jar</type>
      <version>1.1.2</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-i18n</artifactId>
      <type>jar</type>
      <version>1.0-beta-7</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-velocity</artifactId>
      <type>jar</type>
      <version>1.1.7</version>
    </dependency>
    <dependency>
      <groupId>org.apache.velocity</groupId>
      <artifactId>velocity</artifactId>
      <type>jar</type>
      <version>1.5</version>
    </dependency>
    <dependency>
      <groupId>oro</groupId>
      <artifactId>oro</artifactId>
      <type>jar</type>
      <version>2.0.8</version>
    </dependency>
    <dependency>
      <groupId>commons-collections</groupId>
      <artifactId>commons-collections</artifactId>
      <type>jar</type>
      <version>3.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.reporting</groupId>
      <artifactId>maven-reporting-impl</artifactId>
      <type>jar</type>
      <version>2.1</version>
    </dependency>
    <dependency>
      <groupId>commons-validator</groupId>
      <artifactId>commons-validator</artifactId>
      <type>jar</type>
      <version>1.2.0</version>
    </dependency>
    <dependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <type>jar</type>
      <version>1.7.0</version>
    </dependency>
    <dependency>
      <groupId>commons-digester</groupId>
      <artifactId>commons-digester</artifactId>
      <type>jar</type>
      <version>1.6</version>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <type>jar</type>
      <version>1.0.4</version>
    </dependency>
    <dependency>
      <groupId>xml-apis</groupId>
      <artifactId>xml-apis</artifactId>
      <type>jar</type>
      <version>1.0.b2</version>
    </dependency>
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjtools</artifactId>
      <type>jar</type>
      <version>1.8.5</version>
    </dependency>
  </dependencies>
</plugin>